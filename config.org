#+TITLE: Zach's Emacs Config

* Todo 

** TODO Set up org capture templates
* Packages 
** Setup

#+BEGIN_SRC emacs-lisp

  (setq package-enable-at-startup nil)
  (require 'package)
  (add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'diminish)
    (package-refresh-contents)
    (package-install 'diminish))

#+END_SRC
 
** Completion
   
Helm/Ivy/Ido 

- For Ivy you don't need to uncomment the use-package block for ivy, it's installed automatically

#+BEGIN_SRC emacs-lisp
    ;; HELM WITH MODE

      ;; (use-package helm
      ;;   :ensure t
      ;;   ;;:diminish (helm-mode . "")
      ;;   :bind (("M-x" . helm-M-x)
      ;;          ;;("C-c C-f" . helm-recentf)
      ;;          ("C-c y" . helm-show-kill-ring)
      ;;          ("C-x C-f" . helm-find-files)
      ;;          ("C-x C-b" . helm-buffers-list)
      ;;          ("C-x b" . helm-buffers-list)
      ;;          ("C-c p" . helm-recentf))
      ;;   :config (helm-mode 1))

      ;; (use-package helm-ag
      ;;   :ensure t
      ;;   :bind (("C-c k" . helm-do-ag-this-file)
      ;;   ("C-x C-y" . helm-do-ag-project-root)))



    ;; IVY - COMPLETION FRAMEWORK

  ;;  (use-package ivy
  ;;    :ensure t
  ;;    :diminsh ivy-mode
  ;;    :config
  ;;    (progn
  ;;      (ivy-mode 1)))

    ;; COUNSEL - HELM REPLACEMENT

    ;; (use-package counsel
    ;;  :ensure t
    ;;  :bind
    ;;   ("M-x" . counsel-M-x)
    ;;   ("C-c g" . counsel-git)
    ;;   ("C-x p" . counsel-recentf)
    ;;   ("C-x C-f" . counsel-find-file)
    ;;   ("C-c j" . counsel-git-grep)
    ;;   ("C-c k" . counsel-ag)
    ;;   ("C-x b" . ivy-switch-buffer))


    ;; IDO - BASIC COMPLETION


    (setq ido-create-new-buffer 'always)
    (setq ido-enable-flex-matching t)
    (setq ido-enable-prefix t)
    (setq ido-everywhere t)
    (ido-mode 1)
    (ido-everywhere 1)
    
  (use-package ido-completing-read+
    :ensure t
    :config
    (ido-ubiquitous-mode 1))

  (use-package smex
    :ensure t
    :bind ("M-x" . smex)
    ("M-X" . smex-major-mode-commands))

#+end_src

** Swiper

This replaces the regular i-search

#+begin_src emacs-lisp 

    ;; SWIPER - SEARCH REPLACEMENT

    (use-package swiper
      :ensure t
      :bind ("C-c s" . swiper)
      :config
      (progn
        (setq ivy-use-virtual-buffers t)
        (setq enable-recursive-minibuffers t)))


#+end_src
** Text-Completion
   
Company/Auto-complete

#+BEGIN_SRC emacs-lisp

    (use-package company
      :ensure t
      :diminish (company-mode . "")
      :init
      (global-company-mode))

  (use-package company-auctex
    :ensure t
    :config
    (company-auctex-init))

  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :diminish (auto-complete-mode . "")
  ;;   :config
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)))

#+END_SRC
   
*** Ac-Helm 
    

#+begin_src emacs-lisp
  ;; (use-package ac-helm
  ;;   :ensure t
  ;;   :bind (("C-:" . ac-complete-with-helm) ))

#+end_src

*** Ac-Org

#+begin_src emacs-lisp

  ;; (use-package org-ac
  ;;   :ensure t
  ;;   :init (progn
  ;;           (require 'org-ac)
  ;;           (org-ac/config-default)
  ;;           ))

#+end_src    
** Yasnippet 

For snippet expansion, snippets are defined in their own files not in init. 

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish (yas-minor-mode . "")
    :init (yas-global-mode 1))
#+END_SRC

** Web-mode 

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
           ("\\.html\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.jinja\\'" . web-mode)
           ("\\.php\\'" . web-mode)))
#+END_SRC
** Org 
   
*** Setup 

#+BEGIN_SRC emacs-lisp
  ;;Hide leading stars
  ;;(setq org-startup-indented t)


  ;;Bootstrap HTML export
  (use-package ox-twbs
    :ensure t)

  ;;Add notes when task done
  (setq org-log-done 'note)
  (setq org-log-done 'time)

  ;;Execute embedded python
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  ;;Flyspell Hook
  ;;(add-hook 'org-mode-hook 'flyspell-mode)

#+END_SRC
   
*** Capture Templates

#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "~/Google Drive/_.org"))
  (define-key global-map "\C-cc" 'org-capture)
#+end_src

*** Agenda Views 

#+begin_src emacs-lisp

  ;;Agenda
  (global-set-key (kbd "C-c a") 'org-agenda)
  '(org-agenda-files (quote ("~/Google Drive/_.org")))

#+end_src

** Magit 
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+END_SRC
** Auctex 

#+begin_src emacs-lisp
   (use-package tex
     :defer t
     :ensure auctex
     :config
     (setq TeX-auto-save t)
     (setq TeX-parse-self t)
     (setq-default TeX-master nil)
  ;; (setq-default TeX-electric-math t)
     

     (add-hook 'LaTeX-mode-hook 'visual-line-mode)
     (add-hook 'LaTeX-mode-hook 'flyspell-mode)
     (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode))
     (add-hook 'LaTeX-mode-hook
               '(lambda ()
                  (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))

#+end_src
** Themes

#+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t)

    (use-package spacegray-theme
      :ensure t
      :config (load-theme 'zenburn t))
#+END_SRC

** Mode-line 

#+begin_src emacs-lisp 
  (use-package smart-mode-line
    :ensure t
    :config
    (setq sml/theme 'respectful)
    (setq sml/no-confirm-load-theme t)
    (add-to-list 'sml/replacer-regexp-list '("^:Doc:/Year11Notes/" ":11Notes") t)
    (add-to-list 'sml/replacer-regexp-list '("^~/.dotfiles/" ":dots:") t)
    (sml/setup))

#+end_src

** Multi-term

#+begin_src emacs-lisp

  (use-package multi-term
    :ensure t
    :bind (("C-c t" . multi-term-dedicated-toggle)
           ("C-z" . multi-term))
    :config
    ;;(setq multi-term-program "/bin/bash")
    (setq multi-term-program "/usr/local/bin/zsh")
    (setq multi-term-dedicated-close-back-to-open-buffer-p t)
    (setq multi-term-dedicated-select-after-open-p t)
    (setq multi-term-dedicated-window-height 10))

#+end_src
** PDF-Tools

#+begin_src emacs-lisp

  ;; (use-package pdf-tools
  ;;   :ensure t)

  ;;; Install epdfinfo via 'brew install pdf-tools' and then install the
  ;;; pdf-tools elisp via the use-package below. To upgrade the epdfinfo
  ;;; server, just do 'brew upgrade pdf-tools' prior to upgrading to newest
  ;;; pdf-tools package using Emacs package system. If things get messed
  ;;; up, just do 'brew uninstall pdf-tools', wipe out the elpa
  ;;; pdf-tools package and reinstall both as at the start.
  (use-package pdf-tools
    :ensure t
    :config
    (custom-set-variables
      '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
    (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
  (pdf-tools-install)
#+end_src

** Misc

#+BEGIN_SRC emacs-lisp
  ;Shows key commands when prompted
  (use-package which-key
    :ensure t
    :diminish (which-key-mode . "")
    :config (which-key-mode))

  ;Better window switching
  (use-package ace-window
    :ensure t
    :diminish (ace-window-mode . "")
    :init
      (global-set-key [remap other-window] 'ace-window))

  ;Delete all extra whitespace
  (use-package hungry-delete
    :ensure t
    :diminish (hungry-delete-mode . "")
    :config (global-hungry-delete-mode))

  ;Better replace (multiple cursors)
  (use-package iedit
    :ensure t
    :diminish (iedit-mode . ""))

  (use-package speed-type
    :ensure t
    :config
    (add-hook 'speed-type-mode-hook visual-line-mode))

  ;;Multi
  ;;(use-package multi
  ;;  ensure: t)

  ;;Spotify
  ;;(use-package helm-spotify-plus
  ;; :ensure t)


#+END_SRC
* Defaults 
** Menu 

#+begin_src emacs-lisp 
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)

    (setq initial-scratch-message ";; Wassup Buddy, you're home now
;; It's ok...
")
#+end_src
** Scrolling 

#+begin_src emacs-lisp

  (global-set-key "\M-n" "\C-u1\C-v")
  (global-set-key "\M-p" "\C-u1\M-v")

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
  (setq mouse-wheel-progressive-speed nil) 

#+end_src

** Mark 

#+begin_src emacs-lisp

;;  (transient-mark-mode nil)

#+end_src

** Backups 
#+begin_src emacs-lisp

    ;;backups
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
** Utf-8 

#+begin_src emacs-lisp 
    ;;use utf-8
    (setq locale-coding-system 'utf-8) 
    (set-terminal-coding-system 'utf-8) 
    (set-keyboard-coding-system 'utf-8) 
    (set-selection-coding-system 'utf-8) 
    (prefer-coding-system 'utf-8)

#+end_src
** Personal 

#+begin_src emacs-lisp 
    ;;Personal Information
    (setq user-full-name "Zachary Dawood" 
          user-mail-address "zachary.dawood@gmail.com")

#+end_src
** Shell 

Shell is weird on mac delete set-exec-path-from-shell-PATH when on linux

#+begin_src emacs-lisp 
  (setq explicit-shell-file-name "/bin/bash")

  ;; Getting shell to use the correct path
  (defun set-exec-path-from-shell-PATH ()
   (let ((path-from-shell (replace-regexp-in-string
                           "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell) ; for eshell users
      (setq exec-path (split-string path-from-shell path-separator))))

  (when window-system (set-exec-path-from-shell-PATH))

  ;; (use-package exec-path-from-shell
  ;;   :init (when (memq window-system '(mac ns x))
  ;;           (exec-path-from-shell-initialize)))
#+end_src
** Bindings 

#+begin_src emacs-lisp 

  (global-set-key (kbd "C-c f") 'next-buffer)
  (global-set-key (kbd "C-c b") 'previous-buffer)
  (global-set-key (kbd "C-c k") 'kill-buffer)
  (global-set-key (kbd "C-c v") 'visual-line-mode)


#+end_src

** Zone 

#+begin_src emacs-lisp 

  ;; (use-package zone
  ;;   :ensure t
  ;;   :config
  ;;   (zone-when-idle 10)
  ;;   (setq zone-programs [zone-pgm-putz-with-case])
  ;;   )


#+end_src
** Font

#+begin_src emacs-lisp 

#+end_src
   
** Misc 
#+begin_src emacs-lisp 
  ;;Frame Size
  (when window-system (set-frame-size (selected-frame) 120 50))

  ;;This is for line wrapping
  (global-visual-line-mode)
  (diminish 'visual-line-mode)
  (diminish 'auto-revert-mode)

  (delete-selection-mode t)

  (setq default-cursor-type 'bar)
  (blink-cursor-mode 1)

  ;;Go away
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)

  ;;Save Buffer State
  ;;(desktop-save-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;;highlight matching parentheses
  (show-paren-mode 1)
  (setq show-paren-delay 0)

  ;;Add other bracket
  (electric-pair-mode 1)

  ;;new buffer mode
  (setq-default major-mode 'org-mode)
#+end_src
** Server 

#+begin_src emacs-lisp
  (server-start)

#+end_src
* Startup

#+begin_src emacs-lisp 
  ;;(multi-term-dedicated-open)
  ;; (find-file "~/Google Drive/_.org")
  ;; (rename-buffer "Main")




#+end_src
