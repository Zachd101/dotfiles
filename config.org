#+TITLE: Zach's Emacs Config


* Packages 
** Setup 

#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
  (require 'package)
  (add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (unless (package-installed-p 'diminish)
    (package-refresh-contents)
    (package-install 'diminish))


#+END_SRC
 
** Helm
   
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :diminish (helm-mode . "")
    :bind (("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x C-b" . helm-buffers-list)
           ("C-x b" . helm-buffers-list))
    :config (helm-mode 1))
#+END_SRC
** Company

#+BEGIN_SRC emacs-lisp

    (use-package company
      :ensure t
      :init
      (global-company-mode))

  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :diminish (auto-complete-mode . "")
  ;;   :config
  ;;   (progn
  ;;     (ac-config-default)
  ;;     (global-auto-complete-mode t)))

#+END_SRC
   
*** Ac-Helm 
    

#+begin_src emacs-lisp
  ;; (use-package ac-helm
  ;;   :ensure t
  ;;   :bind (("C-:" . ac-complete-with-helm) ))

#+end_src

*** Ac-Org

#+begin_src emacs-lisp

  ;; (use-package org-ac
  ;;   :ensure t
  ;;   :init (progn
  ;;           (require 'org-ac)
  ;;           (org-ac/config-default)
  ;;           ))

#+end_src    
** Yasnippet 

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
#+END_SRC

** Web-mode 

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode)
           ("\\.html\\.erb\\'" . web-mode)
           ("\\.mustache\\'" . web-mode)
           ("\\.jinja\\'" . web-mode)
           ("\\.php\\'" . web-mode)))
#+END_SRC
** Org 
   
*** Setup 

#+BEGIN_SRC emacs-lisp
  ;;Bootstrap HTML export
  (use-package ox-twbs
    :ensure t)

  ;;Add notes when task done
  (setq org-log-done 'note)
  (setq org-log-done 'time)

  ;;Execute embedded python
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

#+END_SRC
   
*** Capture Templates

#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "~/Google Drive/_.org"))
  (define-key global-map "\C-cc" 'org-capture)
#+end_src

*** Agenda Views 

#+begin_src emacs-lisp

  ;;Agenda
  (global-set-key (kbd "C-c a") 'org-agenda)
  '(org-agenda-files (quote ("~/Google Drive/_.org")))

#+end_src

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC
** Auctex 

#+begin_src emacs-lisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)

    (add-hook 'LaTeX-mode-hook 'visual-line-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)) 


#+end_src

** Misc 

#+BEGIN_SRC emacs-lisp
  ;Shows key commands when prompted
  (use-package which-key
    :ensure t
    :diminish (which-key-mode . "")
    :config (which-key-mode))

  ;Better window switching
  (use-package ace-window
    :ensure t
    :diminish (ace-window-mode . "")
    :init
      (global-set-key [remap other-window] 'ace-window))

  ;Delete all extra whitespace
  (use-package hungry-delete
    :ensure t
    :diminish (hungry-delete-mode . "")
    :config (global-hungry-delete-mode))

  ;Better replace (multiple cursors)
  (use-package iedit
    :ensure t
    :diminish (iedit-mode . ""))

  (use-package speed-type
    :ensure t)
#+END_SRC
** Themes

#+BEGIN_SRC emacs-lisp
    (use-package zenburn-theme
      :ensure t)

    (use-package spacegray-theme
      :ensure t
      :config (load-theme 'spacegray t))
#+END_SRC
* Defaults 
** Menu 

#+begin_src emacs-lisp 
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)
    (tooltip-mode -1)
#+end_src
** Backups 
#+begin_src emacs-lisp
    ;;backups
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
    (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
** Utf-8 

#+begin_src emacs-lisp 
    ;;use utf-8
    (setq locale-coding-system 'utf-8) 
    (set-terminal-coding-system 'utf-8) 
    (set-keyboard-coding-system 'utf-8) 
    (set-selection-coding-system 'utf-8) 
    (prefer-coding-system 'utf-8)

#+end_src
** Personal 

#+begin_src emacs-lisp 
    ;;Personal Information
    (setq user-full-name "Zachary Dawood" 
          user-mail-address "zachary.dawood@gmail.com")

#+end_src
** Shell 

#+begin_src emacs-lisp 
  (setq explicit-shell-file-name "/usr/local/bin/zsh")

  ;; Getting shell to use the correct path
  (defun set-exec-path-from-shell-PATH ()
   (let ((path-from-shell (replace-regexp-in-string
                           "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell) ; for eshell users
      (setq exec-path (split-string path-from-shell path-separator))))

  (when window-system (set-exec-path-from-shell-PATH))

  ;; (use-package exec-path-from-shell
  ;;   :init (when (memq window-system '(mac ns x))
  ;;           (exec-path-from-shell-initialize)))
#+end_src
** Misc 
#+begin_src emacs-lisp 
  ;;This is for line wrapping
  (global-visual-line-mode)
  (diminish 'visual-line-mode)
  (diminish 'auto-revert-mode)

  (delete-selection-mode t)

  (setq default-cursor-type 'bar)
  (blink-cursor-mode 1)

  ;;Go away
  (setq visible-bell t)
  (setq ring-bell-function 'ignore)

  ;;Save Buffer State
  ;;(desktop-save-mode 1)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;;highlight matching parentheses
  (show-paren-mode 1)
  (setq show-paren-delay 0)

  ;;Add other bracket
  (electric-pair-mode 1)
#+end_src

   
